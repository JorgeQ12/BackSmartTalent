// <auto-generated />
using System;
using BackSmartTalent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SmartTalentApi.Migrations
{
    [DbContext(typeof(DbContextSmartTalent))]
    [Migration("20231212172831_ApiDbV1")]
    partial class ApiDbV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.ContactEmergency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameslastNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactEmergency");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Guests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdContactEmergency")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdContactEmergency");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Hotels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Reservations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdGuests")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdRooms")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGuests");

                    b.HasIndex("IdRooms")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Rooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdHotels")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdHotels");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Administrator")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Guests", b =>
                {
                    b.HasOne("BackSmartTalent.Domain.Entities.ContactEmergency", "ContactEmergency")
                        .WithMany()
                        .HasForeignKey("IdContactEmergency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactEmergency");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Reservations", b =>
                {
                    b.HasOne("BackSmartTalent.Domain.Entities.Guests", "Guests")
                        .WithMany()
                        .HasForeignKey("IdGuests")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackSmartTalent.Domain.Entities.Rooms", "Rooms")
                        .WithOne("ReservationsNavigation")
                        .HasForeignKey("BackSmartTalent.Domain.Entities.Reservations", "IdRooms")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guests");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Rooms", b =>
                {
                    b.HasOne("BackSmartTalent.Domain.Entities.Hotels", "HotelsNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("IdHotels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelsNavigation");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Hotels", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BackSmartTalent.Domain.Entities.Rooms", b =>
                {
                    b.Navigation("ReservationsNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
